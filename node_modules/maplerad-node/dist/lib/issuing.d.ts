import { AxiosInstance, AxiosResponse } from "axios";
import { CurrencyType, QueryParams, CardBrand } from "../utils";
declare type CardType = "PHYSICAL" | "VIRTUAL";
interface CardPayload {
    customer_id: string;
    type: CardType;
    currency: CurrencyType;
    auto_approve: boolean;
    brand?: CardBrand;
    amount?: number;
    card_pin?: number;
}
interface BusinessCardPayload extends CardPayload {
    name: string;
}
export default class Issuing {
    private axios;
    constructor(axios: AxiosInstance);
    CreateCard(payload: CardPayload): Promise<AxiosResponse | any>;
    CreateBusinessCard(payload: BusinessCardPayload): Promise<AxiosResponse | any>;
    SetCardPin(cardID: string, pin: string): Promise<AxiosResponse | any>;
    GetCard(cardID: string): Promise<AxiosResponse | any>;
    GetAllCards(): Promise<AxiosResponse | any>;
    GetCardTransactions(cardID: string, params?: QueryParams): Promise<any>;
    FundCard(cardID: string, amount: number): Promise<AxiosResponse | any>;
    WithdrawFromCard(cardID: string, amount: number): Promise<AxiosResponse | any>;
    FreezeCard(cardID: string): Promise<AxiosResponse | any>;
    UnFreezeCard(cardID: string): Promise<AxiosResponse | any>;
}
export {};
